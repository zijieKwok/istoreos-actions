name: Build_mt7986_xdr6086_iStoreOS

on: 
  repository_dispatch:
  workflow_dispatch:

# 定时触发编译
  schedule:
   # - cron: 11 22 * * 4
    - cron: 0 16 * * *

# 点赞☆Star触发编译
#  watch:
#    types: [started]

jobs:
  Build_mt7986_xdr6086_iStoreOS:
    runs-on: ubuntu-20.04
    steps:
    - name: Clone Repository
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "Asia/Shanghai" 
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get update -y
        sudo -E apt-get install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3.8 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev libfuse-dev libfuse-dev python3-setuptools g++ file clang
        pip install aligo
        sudo -E apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h
        
    - name: 下载源码
      env: 
        REPO_URL: https://github.com/istoreos/istoreos
        REPO_BRANCH: istoreos-24.10


      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        cp -f ../diy/mt798x/diy-part1.sh ./
        chmod +x ./diy-part1.sh && ./diy-part1.sh

    - name: 更新 & 安装 feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a

        ./scripts/feeds install -a

        cp -f ../diy/mt798x/diy-part2.sh ./        
        chmod +x ./diy-part2.sh && ./diy-part2.sh      

        sed -i "s/DISTRIB_DESCRIPTION='*.*'/DISTRIB_DESCRIPTION='TP-Link_TL-XDR6086-iStoreOS$(date +%Y%m%d)'/g"  package/base-files/files/etc/openwrt_release
              
    - name: 配置自定义 - Build_mt7986_xdr6086_iStoreOS
      env:
        CONFIG_FILE: './configs/ARM/mt798x/.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt && make defconfig
        
    - name: 下载软件包
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      working-directory: ./openwrt
      run: |      
        make -j$(nproc) V=s
        
    - name: 整理文件
      id: assemble_artifact
      run: |
        rm -rf ./ARM_Out
        mkdir -p ./ARM_Out/
        cp -a ./openwrt/.config ./ARM_Out/.config
        
        getmd5()
        {
        md5sum=`md5sum $1`
        md5=`echo ${md5sum% *}`
        md5=`echo ${md5:0:10}`
        }
        
        rom=openwrt/bin/targets/mediatek/mt7986/openwrt-mediatek-mt7986-tplink_tl-xdr6086-squashfs-sysupgrade.bin
        getmd5 $rom        
        cp -a $rom ./ARM_Out/TP-Link_TL-xdr6086-iStoreOS-$(date +%Y%m%d)_${md5}.bin
               
    - name: 上传固件
      uses: actions/upload-artifact@main
      with:
        name: XDR6086-OpenWrt
        path: ARM_Out/*.bin

    - name: 上传配置
      uses: actions/upload-artifact@main
      with:
        name: XDR6086-config
        path: ARM_Out/.config

    - name: 上传软件包
      uses: actions/upload-artifact@main
      with:
        name: XDR6086-Packages
        path: openwrt/bin/packages
        
    - name: 生成标签 & 发布标签
      id: generate_name
      run: |
        time=$(date +%Y%m%d%H%M%S)
        release_tag="$time"
        release_name="TP-Link_TL-XDR6086-iStoreOS-$(date +%Y%m%d)"
        echo "release_name=$release_name" >> $GITHUB_OUTPUT
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT      

    - name: 创建标签 & 上传
      uses: ncipollo/release-action@v1.14.0
      with:
        artifacts: ARM_Out/*.bin
        name: ${{ steps.generate_name.outputs.release_name }}
        tag: ${{ steps.generate_name.outputs.release_tag }}
        token: ${{ secrets.GITHUB_TOKEN }}
